<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.spring.CourseElection.dao.ElectionDoMapper" >
  <resultMap id="BaseResultMap" type="com.spring.CourseElection.model.entity.ElectionDo" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="student_id" property="studentId" jdbcType="VARCHAR" />
    <result column="student_name" property="studentName" jdbcType="VARCHAR" />
    <result column="course_id" property="courseId" jdbcType="INTEGER" />
    <result column="course_name" property="courseName" jdbcType="VARCHAR" />
    <result column="course_time" property="courseTime" jdbcType="VARCHAR" />
    <result column="grade" property="grade" jdbcType="DOUBLE" />
    <result column="usual" property="usual" jdbcType="DOUBLE" />
    <result column="examination" property="examination" jdbcType="DOUBLE" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, student_id, student_name, course_id, course_name, course_time, grade, usual, 
    examination
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.spring.CourseElection.model.entity.ElectionDoExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from election_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from election_info
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from election_info
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.spring.CourseElection.model.entity.ElectionDoExample" >
    delete from election_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.spring.CourseElection.model.entity.ElectionDo" >
    insert into election_info (id, student_id, student_name, 
      course_id, course_name, course_time, 
      grade, usual, examination
      )
    values (#{id,jdbcType=INTEGER}, #{studentId,jdbcType=VARCHAR}, #{studentName,jdbcType=VARCHAR}, 
      #{courseId,jdbcType=INTEGER}, #{courseName,jdbcType=VARCHAR}, #{courseTime,jdbcType=VARCHAR}, 
      #{grade,jdbcType=DOUBLE}, #{usual,jdbcType=DOUBLE}, #{examination,jdbcType=DOUBLE}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.spring.CourseElection.model.entity.ElectionDo" >
    insert into election_info
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="studentId != null" >
        student_id,
      </if>
      <if test="studentName != null" >
        student_name,
      </if>
      <if test="courseId != null" >
        course_id,
      </if>
      <if test="courseName != null" >
        course_name,
      </if>
      <if test="courseTime != null" >
        course_time,
      </if>
      <if test="grade != null" >
        grade,
      </if>
      <if test="usual != null" >
        usual,
      </if>
      <if test="examination != null" >
        examination,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="studentId != null" >
        #{studentId,jdbcType=VARCHAR},
      </if>
      <if test="studentName != null" >
        #{studentName,jdbcType=VARCHAR},
      </if>
      <if test="courseId != null" >
        #{courseId,jdbcType=INTEGER},
      </if>
      <if test="courseName != null" >
        #{courseName,jdbcType=VARCHAR},
      </if>
      <if test="courseTime != null" >
        #{courseTime,jdbcType=VARCHAR},
      </if>
      <if test="grade != null" >
        #{grade,jdbcType=DOUBLE},
      </if>
      <if test="usual != null" >
        #{usual,jdbcType=DOUBLE},
      </if>
      <if test="examination != null" >
        #{examination,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.spring.CourseElection.model.entity.ElectionDoExample" resultType="java.lang.Integer" >
    select count(*) from election_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update election_info
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.studentId != null" >
        student_id = #{record.studentId,jdbcType=VARCHAR},
      </if>
      <if test="record.studentName != null" >
        student_name = #{record.studentName,jdbcType=VARCHAR},
      </if>
      <if test="record.courseId != null" >
        course_id = #{record.courseId,jdbcType=INTEGER},
      </if>
      <if test="record.courseName != null" >
        course_name = #{record.courseName,jdbcType=VARCHAR},
      </if>
      <if test="record.courseTime != null" >
        course_time = #{record.courseTime,jdbcType=VARCHAR},
      </if>
      <if test="record.grade != null" >
        grade = #{record.grade,jdbcType=DOUBLE},
      </if>
      <if test="record.usual != null" >
        usual = #{record.usual,jdbcType=DOUBLE},
      </if>
      <if test="record.examination != null" >
        examination = #{record.examination,jdbcType=DOUBLE},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update election_info
    set id = #{record.id,jdbcType=INTEGER},
      student_id = #{record.studentId,jdbcType=VARCHAR},
      student_name = #{record.studentName,jdbcType=VARCHAR},
      course_id = #{record.courseId,jdbcType=INTEGER},
      course_name = #{record.courseName,jdbcType=VARCHAR},
      course_time = #{record.courseTime,jdbcType=VARCHAR},
      grade = #{record.grade,jdbcType=DOUBLE},
      usual = #{record.usual,jdbcType=DOUBLE},
      examination = #{record.examination,jdbcType=DOUBLE}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.spring.CourseElection.model.entity.ElectionDo" >
    update election_info
    <set >
      <if test="studentId != null" >
        student_id = #{studentId,jdbcType=VARCHAR},
      </if>
      <if test="studentName != null" >
        student_name = #{studentName,jdbcType=VARCHAR},
      </if>
      <if test="courseId != null" >
        course_id = #{courseId,jdbcType=INTEGER},
      </if>
      <if test="courseName != null" >
        course_name = #{courseName,jdbcType=VARCHAR},
      </if>
      <if test="courseTime != null" >
        course_time = #{courseTime,jdbcType=VARCHAR},
      </if>
      <if test="grade != null" >
        grade = #{grade,jdbcType=DOUBLE},
      </if>
      <if test="usual != null" >
        usual = #{usual,jdbcType=DOUBLE},
      </if>
      <if test="examination != null" >
        examination = #{examination,jdbcType=DOUBLE},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.spring.CourseElection.model.entity.ElectionDo" >
    update election_info
    set student_id = #{studentId,jdbcType=VARCHAR},
      student_name = #{studentName,jdbcType=VARCHAR},
      course_id = #{courseId,jdbcType=INTEGER},
      course_name = #{courseName,jdbcType=VARCHAR},
      course_time = #{courseTime,jdbcType=VARCHAR},
      grade = #{grade,jdbcType=DOUBLE},
      usual = #{usual,jdbcType=DOUBLE},
      examination = #{examination,jdbcType=DOUBLE}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>